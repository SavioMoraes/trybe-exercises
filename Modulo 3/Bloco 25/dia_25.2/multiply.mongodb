use('agg_example');
db.sales.find();

// use('agg_example');
// db.sales.updateOne(
//   { _id: 1 }, 
//   { $set: { quantity: 2 } }
// );

// use('agg_example');
// db.sales.updateOne(
//   { _id: 2 }, 
//   { $set: { quantity: 1 } }
// );

// use('agg_example');
// db.sales.updateOne(
//   { _id: 3 }, 
//   { $set: { quantity: 10 } }
// );


/* A expressão $multiply multiplica dois valores numéricos. Esses valores devem ser passados num array , como nas outras expressões anteriores. */

/* Na agregação a seguir, utilizamos o $multiply no estágio $project para projetar um novo campo chamado total , que conterá o valor da multiplicação entre os campos price e quantity: */

use('agg_example');
db.sales.aggregate([
  {
    $project: {
      date: 1,
      item: 1,
      total: {
        $multiply: ["$price", "$quantity"]
      }
    }
  }
]);

// Para fixar (Utilizando o banco de dados storage):

/* 1. Calcule qual o valor total em estoque de cada produto, considerando o preço de venda e a quantidade. */
use('storage');
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      total_profit: {
        $multiply: ["$sale_price", "$quantity"]
      }
    }
  }
]);

/* 2. Calcule qual será o lucro total de cada produto caso todo o estoque seja vendido. */
use('storage');
db.products.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      total_profit: {
        $multiply: [
          {
            $subtract: [
              "$sale_price",
              { $add: ["$taxes", "$purchase_price"] }
            ]
          }, 
          "$quantity"
        ]
      }
    }
  }
]);


