# Exerc√≠cio 1: Em um contexto de orienta√ß√£o a objetos, como podemos
# definir o que s√£o mensagens e qual a sua import√¢ncia?
# R: De acordo com o conte√∫do, uma mensagem √© uma das responsabilidades
# que um objeto pode ter, sendo utilizada para invocar um comportamento.
# Quando uma mensagem √© enviada a um objeto, o mesmo pode ou n√£o alterar
# seu estado. √â importante, pois orienta√ß√£o a objetos √© sobre objetos e
# sua comunica√ß√£o. E essa comunica√ß√£o entre os objetos √© feita atrav√©s
# de mensagens.

# Exerc√≠cio 2: Para exercitar nossa capacidade de abstra√ß√£o, vamos modelar
# algumas partes de um software de geometria. Como poder√≠amos modelar um
# objeto ret√¢ngulo?
# üê¶ Para ajudar, segue o exemplo do quadrado. Vamos utilizar a seguinte
# nota√ß√£o para descrever nossas abstra√ß√µes:
"""
Nome da abstra√ß√£o
Quadrado

atributos/estados
- lado (tamanho)

comportamentos
- calcular area (lado * lado)
- calcular per√≠metro (4 * lado)
"""
#########################################################################
"""
Nome da abstra√ß√£o
Ret√¢ngulo

atributos/estados
- base (tamanho)
- altura (tamanho)

comportamentos
- calcular area (base * altura)
- calcular per√≠metro (2 * (base + altura))
"""


class Retangulo:
    def __init__(self, base, altura):
        self.base = base
        self.altura = altura

    def calcular_area(self):
        return self.base * self.altura

    def calcular_perimetro(self):
        return self.base * 2 + self.altura * 2


# Para testar!
retangulo_1 = Retangulo(5, 3)
print(retangulo_1.calcular_area())
print(retangulo_1.calcular_perimetro())
